{"version":3,"file":"manifest.js","sourceRoot":"","sources":["../../src/utils/manifest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA8B;AAC9B,kDAAmD;AACnD,yCAA2B;AAC3B,yDAAiD;AACjD,6CAA0C;AAE1C,MAAM,mBAAmB,GAAG,CAAC,CAAC,IAAI,CAAC;IAC/B,IAAI,EAAE,CAAC,CAAC,MAAM;IACd,OAAO,EAAE,CAAC,CAAC,MAAM;IACjB,WAAW,EAAE,CAAC,CAAC,MAAM;CACxB,CAAC,CAAC;AAEH,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC;IACtB,MAAM,EAAE,CAAC,CAAC,MAAM;IAChB,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC;QAChB,MAAM,EAAE,CAAC,CAAC,MAAM;KACnB,CAAC;CACL,CAAC,CAAC;AAEI,MAAM,cAAc,GAAG;IAC1B,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAC/B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,CAAC,CACnD,CAAC;IACF,MAAM,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;IAC1C,MAAM,QAAQ,GAAG,mBAAmB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACzD,IAAI,IAAA,eAAM,EAAC,QAAQ,CAAC,EAAE,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,IAAA,sBAAO,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvD,CAAC;IACD,OAAO,QAAQ,CAAC,KAAK,CAAC;AAC1B,CAAC,CAAC;AAVW,QAAA,cAAc,kBAUzB;AAEK,MAAM,eAAe,GAAG,KAAK;IAChC,MAAM,GAAG,GAAG,IAAA,sBAAc,GAAE,CAAC;IAC7B,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC;QAC7B,GAAG,EAAE,8BAA8B,GAAG,CAAC,IAAI,EAAE;QAC7C,IAAI,EAAE,IAAI;KACb,CAAC,CAAC;IACH,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC9C,IAAI,IAAA,eAAM,EAAC,OAAO,CAAC,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,IAAA,sBAAO,EAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtD,CAAC;IACD,OAAO;QACH,UAAU,EAAE,GAAG,CAAC,OAAO,KAAK,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM;QAC7D,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,OAAO,EAAE,GAAG,CAAC,OAAO;QACpB,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM;KAC5C,CAAC;AACN,CAAC,CAAC;AAhBW,QAAA,eAAe,mBAgB1B","sourcesContent":["import path = require(\"path\");\nimport request = require(\"request-promise-native\");\nimport * as t from \"io-ts\";\nimport { failure } from \"io-ts/lib/PathReporter\";\nimport { isLeft } from \"fp-ts/lib/Either\";\n\nconst NodePackageManifest = t.type({\n    name: t.string,\n    version: t.string,\n    description: t.string,\n});\n\nconst NPMPkgInfo = t.type({\n    \"name\": t.string,\n    \"dist-tags\": t.type({\n        latest: t.string,\n    }),\n});\n\nexport const getPackageInfo = function () {\n    const manifestPath = path.normalize(\n        path.join(__dirname, \"..\", \"..\", \"package.json\"),\n    );\n    const rawManifest = require(manifestPath);\n    const manifest = NodePackageManifest.decode(rawManifest);\n    if (isLeft(manifest)) {\n        throw new Error(failure(manifest.left).join(\"\\n\"));\n    }\n    return manifest.right;\n};\n\nexport const checkForUpdates = async function () {\n    const pkg = getPackageInfo();\n    const npmInfoRaw = await request({\n        uri: `https://registry.npmjs.org/${pkg.name}`,\n        json: true,\n    });\n    const npmInfo = NPMPkgInfo.decode(npmInfoRaw);\n    if (isLeft(npmInfo)) {\n        throw new Error(failure(npmInfo.left).join(\"\\n\"));\n    }\n    return {\n        isOutdated: pkg.version !== npmInfo.right[\"dist-tags\"].latest,\n        name: pkg.name,\n        current: pkg.version,\n        latest: npmInfo.right[\"dist-tags\"].latest,\n    };\n};\n"]}