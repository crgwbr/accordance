{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/utils/config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,2CAA6B;AAC7B,8CAAgC;AAChC,uCAAyB;AACzB,yCAA2B;AAC3B,yDAAiD;AACjD,6CAA0C;AAE1C,MAAM,oBAAoB,GAAG,CAAC,CAAC,IAAI,CAAC;IAChC,IAAI,EAAE,CAAC,CAAC,MAAM;IACd,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC;QACV,IAAI,EAAE,CAAC,CAAC,MAAM;KACjB,CAAC;IACF,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC;QACX,QAAQ,EAAE,CAAC,CAAC,MAAM;QAClB,IAAI,EAAE,CAAC,CAAC,MAAM;QACd,IAAI,EAAE,CAAC,CAAC,MAAM;KACjB,CAAC;IACF,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;CAC7D,CAAC,CAAC;AAEH,MAAM,sBAAsB,GAAG,CAAC,CAAC,OAAO,CAAC;IACrC,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;IAC7B,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;IAC9B,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC;CACzC,CAAC,CAAC;AAEH,MAAM,gBAAgB,GAAG,CAAC,CAAC,YAAY,CAAC;IACpC,oBAAoB;IACpB,sBAAsB;CACzB,CAAC,CAAC;AAII,MAAM,UAAU,GAAG,UAAU,UAAkB;IAClD,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACpD,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClD,IAAI,IAAA,eAAM,EAAC,MAAM,CAAC,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,IAAA,sBAAO,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACrD,CAAC;IACD,OAAO,MAAM,CAAC,KAAK,CAAC;AACxB,CAAC,CAAC;AARW,QAAA,UAAU,cAQrB;AAEF,MAAM,iBAAiB,GAAG,UAAU,QAAgB,EAAE,YAAoB;IACtE,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACtD,IAAI,CAAC,MAAM,EAAE,CAAC;QACV,OAAO,EAAE,CAAC;IACd,CAAC;IACD,MAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7B,MAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7B,QAAQ,UAAU,EAAE,CAAC;QACjB,KAAK,MAAM;YACP,OAAO;gBACH,GAAG,UAAU,KAAK;gBAClB,MAAM,UAAU,KAAK;gBACrB,MAAM,UAAU,EAAE;aACrB,CAAC;QACN,KAAK,MAAM;YACP,OAAO;gBACH,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC;gBAC/B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aACvD,CAAC;IACV,CAAC;IACD,OAAO,CAAC,UAAU,CAAC,CAAC;AACxB,CAAC,CAAC;AAEK,MAAM,yBAAyB,GAAG,UACrC,QAAgB,EAChB,KAAe;IAEf,OAAO,KAAK,CAAC,MAAM,CAAW,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;QACzC,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC,EAAE,EAAE,CAAC,CAAC;AACX,CAAC,CAAC;AAPW,QAAA,yBAAyB,6BAOpC;AAEK,MAAM,mBAAmB,GAAG,UAAU,MAAyB;IAClE,MAAM,OAAO,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;IAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC,IAAI,MAAM,CAAC,CAAC;IACvE,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AACtC,CAAC,CAAC;AAJW,QAAA,mBAAmB,uBAI9B;AAEF,MAAM,sBAAsB,GAAG,UAC3B,GAAW,EACX,QAA0B;IAE1B,IAAI,KAAa,CAAC;IAClB,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;QACpB,KAAK,GAAG,MAAM,CAAC;IACnB,CAAC;SAAM,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;QAC5B,KAAK,GAAG,OAAO,CAAC;IACpB,CAAC;SAAM,CAAC;QACJ,KAAK,GAAG,QAAQ,CAAC;IACrB,CAAC;IACD,OAAO,GAAG,GAAG,MAAM,KAAK,EAAE,CAAC;AAC/B,CAAC,CAAC;AAEK,MAAM,iBAAiB,GAAG,UAAU,MAAyB;IAChE,mCAAmC;IACnC,MAAM,SAAS,GAAG,SAAS,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IACtE,MAAM,KAAK,GAAa;QACpB,sBAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;QACjD,sBAAsB,CAAC,MAAM,EAAE,SAAS,CAAC;KAC5C,CAAC;IAEF,yBAAyB;IACzB,IAAI,MAAM,CAAC,MAAM,KAAK,OAAO,EAAE,CAAC;QAC5B,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACpE,CAAC;SAAM,CAAC;QACJ,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,uBAAuB;IACvB,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;QACpB,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC/B,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,yBAAyB;IACzB,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;YAC5C,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC;IACL,CAAC;IAED,4BAA4B;IAC5B,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC,CAAC;AA/BW,QAAA,iBAAiB,qBA+B5B;AAEK,MAAM,qBAAqB,GAAG,UAAU,MAAyB;IACpE,MAAM,gBAAgB,GAAG,IAAA,2BAAmB,EAAC,MAAM,CAAC,CAAC;IACrD,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACvD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE,CAAC;QAClC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;IACjD,CAAC;IACD,MAAM,mBAAmB,GAAG,IAAA,yBAAiB,EAAC,MAAM,CAAC,CAAC;IACtD,EAAE,CAAC,aAAa,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;AAC5D,CAAC,CAAC;AARW,QAAA,qBAAqB,yBAQhC","sourcesContent":["import * as os from \"os\";\nimport * as path from \"path\";\nimport * as yaml from \"js-yaml\";\nimport * as fs from \"fs\";\nimport * as t from \"io-ts\";\nimport { failure } from \"io-ts/lib/PathReporter\";\nimport { isLeft } from \"fp-ts/lib/Either\";\n\nconst AccordanceConfigBase = t.type({\n    name: t.string,\n    local: t.type({\n        root: t.string,\n    }),\n    remote: t.type({\n        username: t.string,\n        host: t.string,\n        root: t.string,\n    }),\n    prefer: t.union([t.literal(\"local\"), t.literal(\"remote\")]),\n});\n\nconst AccordanceConfigExtras = t.partial({\n    syncIgnore: t.array(t.string),\n    watchIgnore: t.array(t.string),\n    options: t.record(t.string, t.boolean),\n});\n\nconst AccordanceConfig = t.intersection([\n    AccordanceConfigBase,\n    AccordanceConfigExtras,\n]);\n\nexport type IAccordanceConfig = t.TypeOf<typeof AccordanceConfig>;\n\nexport const readConfig = function (configPath: string) {\n    const content = fs.readFileSync(configPath, \"utf8\");\n    const rawConfig = yaml.load(content);\n    const config = AccordanceConfig.decode(rawConfig);\n    if (isLeft(config)) {\n        throw new Error(failure(config.left).join(\"\\n\"));\n    }\n    return config.right;\n};\n\nconst _getIgnorePattern = function (rootPath: string, unisonIgnore: string) {\n    const groups = unisonIgnore.match(/^([\\w]+)\\s+(.+)$/);\n    if (!groups) {\n        return [];\n    }\n    const ignoreType = groups[1];\n    const rawPattern = groups[2];\n    switch (ignoreType) {\n        case \"Name\":\n            return [\n                `${rawPattern}/**`,\n                `**/${rawPattern}/**`,\n                `**/${rawPattern}`,\n            ];\n        case \"Path\":\n            return [\n                path.join(rootPath, rawPattern),\n                path.join(rootPath, rawPattern.replace(/\\*/g, \"**\")),\n            ];\n    }\n    return [rawPattern];\n};\n\nexport const getAnyMatchIgnorePatterns = function (\n    rootPath: string,\n    rules: string[],\n) {\n    return rules.reduce<string[]>((memo, rule) => {\n        return memo.concat(_getIgnorePattern(rootPath, rule));\n    }, []);\n};\n\nexport const getUnisonConfigPath = function (config: IAccordanceConfig) {\n    const homeDir = os.homedir();\n    const configPath = path.join(homeDir, \".unison\", `${config.name}.prf`);\n    return path.normalize(configPath);\n};\n\nconst _buildUnisonConfigLine = function (\n    key: string,\n    rawValue: string | boolean,\n) {\n    let value: string;\n    if (rawValue === true) {\n        value = \"true\";\n    } else if (rawValue === false) {\n        value = \"false\";\n    } else {\n        value = rawValue;\n    }\n    return `${key} = ${value}`;\n};\n\nexport const buildUnisonConfig = function (config: IAccordanceConfig) {\n    // Setup the local and remote roots\n    const remoteURL = `ssh://${config.remote.host}/${config.remote.root}`;\n    const lines: string[] = [\n        _buildUnisonConfigLine(\"root\", config.local.root),\n        _buildUnisonConfigLine(\"root\", remoteURL),\n    ];\n\n    // Set the preferred root\n    if (config.prefer === \"local\") {\n        lines.push(_buildUnisonConfigLine(\"prefer\", config.local.root));\n    } else {\n        lines.push(_buildUnisonConfigLine(\"prefer\", remoteURL));\n    }\n\n    // Add the ignore rules\n    if (config.syncIgnore) {\n        config.syncIgnore.forEach((rule) => {\n            lines.push(_buildUnisonConfigLine(\"ignore\", rule));\n        });\n    }\n\n    // Add other misc options\n    if (config.options) {\n        for (const opt of Object.keys(config.options)) {\n            lines.push(_buildUnisonConfigLine(opt, config.options[opt]));\n        }\n    }\n\n    // Join into a single string\n    return lines.join(\"\\n\");\n};\n\nexport const writeUnisonConfigFile = function (config: IAccordanceConfig) {\n    const unisonConfigPath = getUnisonConfigPath(config);\n    const unisonConfigDir = path.dirname(unisonConfigPath);\n    if (!fs.existsSync(unisonConfigDir)) {\n        fs.mkdirSync(path.dirname(unisonConfigPath));\n    }\n    const unisonConfigContent = buildUnisonConfig(config);\n    fs.writeFileSync(unisonConfigPath, unisonConfigContent);\n};\n"]}