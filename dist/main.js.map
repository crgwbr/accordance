{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport os = require(\"os\");\nimport path = require(\"path\");\nimport childProcess = require(\"child_process\");\nimport readline = require(\"readline\");\nimport { Command } from \"commander\";\nimport { ConnectConfig, Client, ClientChannel } from \"ssh2\";\nimport { FSWatcher } from \"chokidar\";\nimport { getPackageInfo, checkForUpdates } from \"./utils/manifest\";\nimport {\n    IAccordanceConfig,\n    readConfig,\n    getAnyMatchIgnorePatterns,\n    writeUnisonConfigFile,\n} from \"./utils/config\";\nimport { makeRed, makeYellow, makeGreen, registerCleanupFn } from \"./utils/cli\";\nimport { ISyncQueueEntry, SyncQueue } from \"./utils/queue\";\nimport { buildWatcher } from \"./utils/watch\";\nimport { getConnection } from \"./utils/remote\";\n\nconst program = new Command();\n\nclass AccordCLI {\n    /**\n     * CLI argument string\n     */\n    private readonly argv: string[];\n\n    /**\n     * Queue of directories that need sync'd. Will be processed in FIFO order.\n     */\n    private readonly syncQueue = new SyncQueue(() => {\n        this.runSync();\n    });\n\n    /**\n     * True when unison sync process is running. Used to prevent multiple sync processes from running concurrently.\n     */\n    private syncIsRunning = false;\n\n    /**\n     * SSH connection to the remote host. Used to listen for remote INOTIFY events.\n     */\n    private sshClient: Client | undefined;\n\n    /**\n     * Input/Output stream from the SSH connection to the remote host.\n     */\n    private remoteWatcher: ClientChannel | undefined;\n\n    /**\n     * Local FSEvents / INOTIFY watcher.\n     */\n    private localWatcher: FSWatcher | undefined;\n\n    /**\n     * Constructor. Initialize the class with an argv string array.\n     */\n    constructor(argv: string[]) {\n        this.argv = argv;\n    }\n\n    /**\n     * Main entry point for the CLI program.\n     *\n     * Parses and validates command line options and then dispatches the appropriate action.\n     */\n    public async run() {\n        const pkg = getPackageInfo();\n\n        // Check for outdated pkg\n        const updateInfo = await checkForUpdates();\n        if (updateInfo.isOutdated) {\n            console.warn(\n                makeYellow(\n                    `You have ${updateInfo.name} version ${updateInfo.current} installed. The latest is ${updateInfo.latest}.\\n` +\n                        `Run \\`npm -g install ${updateInfo.name}\\` to upgrade.\\n`,\n                ),\n            );\n        }\n\n        // Setup basic CLI info\n        program.version(pkg.version);\n\n        // Setup initiator action. This watches local FSevents directly, connects to the remote host over SSH to watch\n        // remote FSevents (by running another instance of itself, remotely, in watch more), and runs the actual\n        // unison sync process when an FSevent is received.\n        program\n            .command(\"sync <configPath>\")\n            .description(\"Run bidirectional sync process with file watching.\")\n            .option(\n                \"--freq <seconds>\",\n                \"How many seconds to wait between periodic full tree syncs\",\n                \"30\",\n            )\n            .action((configPath, options) => {\n                const freq = parseInt(options.freq, 10);\n                this.run__sync(configPath, freq);\n            });\n\n        // Setup remote watcher action. This command is ran over an SSH connection by the sync initiator. It doesn't\n        // actually sync anything - it just watches the given directory and dumps FSevent notifications to stdout. The\n        // sync initiator reacts to those events by running the sync process.\n        program\n            .command(\"watch <rootPath>\")\n            .option(\n                \"-i, --ignore <patterns>\",\n                \"File patterns to ignore, separated by semicolons.\",\n            )\n            .description(\"Run file watcher and dump changed files to stdout.\")\n            .action((rootPath, options) => {\n                const ignorePatterns = options.ignore\n                    ? (options.ignore as string).split(\";\")\n                    : [];\n                this.run__watch(rootPath, ignorePatterns);\n            });\n\n        // Setup catch-all action.\n        program.command(\"*\", \"\", { noHelp: true }).action((cmd) => {\n            console.error(makeRed(`Unknown command was provided: \"${cmd}\"`));\n            this.die();\n        });\n\n        // Parse and run\n        program.parse(this.argv);\n        if (program.args.length <= 0) {\n            this.die();\n        }\n    }\n\n    /**\n     * Output CLI command help and exit the process.\n     */\n    private die() {\n        program.outputHelp(makeRed);\n        process.exit(1);\n    }\n\n    /**\n     * Run the sync initiator process. This does 3 things:\n     *\n     * 1. Watch local FS (INOTIFY) events.\n     * 2. Watch remote FS (INOTIFY) events over an SSH connection.\n     * 3. Queue / run syncs whenever a change is detected.\n     */\n    private async run__sync(configPath: string, periodicSyncInterval: number) {\n        // Read the configuration file\n        const config = readConfig(configPath);\n\n        // Create unison configuration file\n        writeUnisonConfigFile(config);\n\n        // Run initial sync (and wait for it to finish before starting file watchers).\n        await this.runSync({\n            config: config,\n            source: \"local\",\n            eventType: \"initial\",\n            directory: \".\",\n        });\n\n        // Figure out which files to ignore\n        const watchIgnorePatterns = this.getWatchIgnorePatterns(config);\n\n        // Start local file watcher\n        await this.watchLocal(config, watchIgnorePatterns);\n\n        // Start remote file watcher\n        this.watchRemote(config, watchIgnorePatterns);\n\n        // Periodically trigger a full tree sync\n        setInterval(() => {\n            this.syncQueue.queue(config, \"local\", \"periodic-sync\", \".\");\n        }, periodicSyncInterval * 1000);\n\n        // Make sure that file watchers are closed when the process exits\n        registerCleanupFn(() => {\n            console.log(\"Closing file watchers...\");\n            if (this.localWatcher) {\n                this.localWatcher.close();\n            }\n\n            console.log(\"Closing SSH connection...\");\n            if (this.remoteWatcher) {\n                this.remoteWatcher.write(\"\\x03\");\n                this.remoteWatcher.close();\n            }\n            if (this.sshClient) {\n                this.sshClient.end();\n            }\n\n            console.log(\"Done.\");\n        });\n    }\n\n    /**\n     * Run the remote file watcher. Dumps FS events to stdout so they can be read over SSH.\n     */\n    private run__watch(rootPath: string, ignorePatterns: string[]) {\n        const watcher = buildWatcher(rootPath, ignorePatterns);\n\n        // Start remote file watcher\n        watcher.on(\"ready\", () => {\n            const watches = watcher.getWatched();\n            const dirs = Object.keys(watches);\n            const fileCount = dirs.reduce((memo, dir) => {\n                return memo + watches[dir].length;\n            }, 0);\n            process.stdout.write(\n                `Finished initial scan. Watching ${fileCount} files in ${dirs.length} directories.\\n`,\n            );\n        });\n\n        // Dump change events to stdout\n        watcher.on(\"all\", (eventType: string, filePath: string) => {\n            const relPath = path.relative(rootPath, filePath);\n            const msg = JSON.stringify([\"remote\", eventType, relPath]);\n            process.stdout.write(`CMD: ${msg}\\n`);\n        });\n\n        // Make sure that file watchers are closed when the process exits\n        registerCleanupFn(() => {\n            process.stdout.write(`Closing remote file watchers...\\n`);\n            watcher.close();\n            process.stdout.write(`Done.\\n`);\n        });\n    }\n\n    private async watchRemote(\n        config: IAccordanceConfig,\n        ignorePatterns: string[],\n    ) {\n        const sshAgentSock = process.env.SSH_AUTH_SOCK;\n        const sshConfig: ConnectConfig = {\n            host: config.remote.host,\n            port: 22,\n            username: config.remote.username || os.userInfo().username,\n            agent: sshAgentSock,\n        };\n        const cmd = [\"accordance\", \"watch\", config.remote.root];\n        if (ignorePatterns.length > 0) {\n            cmd.push(\"-i\");\n            cmd.push(`'${ignorePatterns.join(\";\")}'`);\n        }\n\n        const handleRemoteOutputLine = (line: string) => {\n            const command = line.match(/^CMD:\\s(.+)$/);\n            if (!command) {\n                console.log(`REMOTE: ${line}`);\n                return;\n            }\n            const [source, eventType, filePath] = JSON.parse(\n                command[1],\n            ) as string[];\n            this.syncQueue.queue(config, source, eventType, filePath);\n        };\n\n        const conn = await getConnection(sshConfig);\n\n        this.sshClient = conn;\n\n        conn.exec(cmd.join(\" \"), { pty: true }, (err, stream) => {\n            if (err) {\n                throw err;\n            }\n\n            this.remoteWatcher = stream;\n\n            // Buffer stdout and action on each line\n            const stdoutBuffer = readline.createInterface({ input: stream });\n            stdoutBuffer.on(\"line\", (line: string) => {\n                handleRemoteOutputLine(line);\n            });\n\n            // Buffer stderr and log each line\n            const stderrBuffer = readline.createInterface({\n                input: stream.stderr,\n            });\n            stderrBuffer.on(\"line\", (line: string) => {\n                console.log(makeRed(`REMOTE ERROR: ${line}`));\n            });\n\n            // Log connection close events\n            stream.on(\"close\", (code: number, signal: number) => {\n                console.log(\n                    makeRed(\n                        `Connection to remote was closed with code ${code}, signal: ${signal}`,\n                    ),\n                );\n                conn.end();\n            });\n        });\n\n        conn.on(\"close\", () => {\n            console.log(makeRed(`Connection to remote was closed!`));\n        });\n        conn.on(\"end\", () => {\n            console.log(makeRed(`Connection to remote was ended!`));\n        });\n        conn.on(\"error\", () => {\n            console.log(makeRed(`Connection to remote encountered an error!`));\n        });\n    }\n\n    private async watchLocal(\n        config: IAccordanceConfig,\n        ignorePatterns: string[],\n    ) {\n        return new Promise((resolve) => {\n            console.log(\"Starting local file watchers...\");\n\n            const watcher = buildWatcher(config.local.root, ignorePatterns);\n            watcher.on(\"ready\", () => {\n                const watches = watcher.getWatched();\n                const dirs = Object.keys(watches);\n                const fileCount = dirs.reduce((memo, dir) => {\n                    return memo + watches[dir].length;\n                }, 0);\n                console.log(\n                    `Finished initial scan. Watching ${fileCount} files in ${dirs.length} directories.`,\n                );\n                resolve(fileCount);\n            });\n\n            // React to FS changes\n            watcher.on(\"all\", (eventType: string, filePath: string) => {\n                const relPath = path.relative(config.local.root, filePath);\n                this.syncQueue.queue(config, \"local\", eventType, relPath);\n            });\n\n            this.localWatcher = watcher;\n        });\n    }\n\n    private getWatchIgnorePatterns(config: IAccordanceConfig) {\n        let watchIgnorePatterns: string[] = [];\n        if (config.syncIgnore) {\n            watchIgnorePatterns = watchIgnorePatterns.concat(\n                getAnyMatchIgnorePatterns(config.local.root, config.syncIgnore),\n            );\n        }\n        if (config.watchIgnore) {\n            watchIgnorePatterns = watchIgnorePatterns.concat(\n                getAnyMatchIgnorePatterns(\n                    config.local.root,\n                    config.watchIgnore,\n                ),\n            );\n        }\n        return watchIgnorePatterns;\n    }\n\n    private runSync(queueEntry?: ISyncQueueEntry) {\n        return new Promise<void>((resolve) => {\n            // Use locking to make sure we only run one sync at a time\n            if (this.syncIsRunning) {\n                return;\n            }\n\n            // Figure out what to sync\n            if (!queueEntry) {\n                queueEntry = this.syncQueue.dequeue();\n            }\n            if (!queueEntry) {\n                return;\n            }\n\n            this.syncIsRunning = true;\n            try {\n                console.log(makeGreen(`SYNCING: ${queueEntry.directory}`));\n                const child = childProcess.spawn(\"unison\", [\n                    queueEntry.config.name,\n                    \"-path\",\n                    queueEntry.directory,\n                ]);\n\n                const writeLines = function (\n                    stream: NodeJS.WritableStream,\n                    data: string | Buffer,\n                ) {\n                    const lines = data\n                        .toString()\n                        .split(\"\\n\")\n                        .map((line) => {\n                            if (!line || line === \"\\n\" || line === \"\\r\") {\n                                return line;\n                            }\n                            if (line.indexOf(\"\\r\") !== -1) {\n                                return `\\rUNISON: ${line.replace(\"\\r\", \"\")}`;\n                            }\n                            return `UNISON: ${line}`;\n                        })\n                        .join(\"\\n\");\n                    stream.write(lines);\n                };\n\n                // Pipe child process stdout to main process stdout\n                if (child.stdout) {\n                    child.stdout.on(\"data\", (data) => {\n                        writeLines(process.stdout, data);\n                    });\n                }\n\n                // Pipe child process stderr to main process stderr\n                if (child.stderr) {\n                    child.stderr.on(\"data\", (data) => {\n                        writeLines(process.stdout, data);\n                    });\n                }\n\n                // Handle sync finish\n                child.on(\"close\", (code) => {\n                    // Unset sync locks\n                    this.syncIsRunning = false;\n                    // Log any errors\n                    if (code !== 0) {\n                        console.log(makeRed(`Unison exited with code ${code}`));\n                        resolve();\n                        return;\n                    }\n                    // If more sync actions were requested while this sync was running, run sync again.\n                    if (this.syncQueue.size() > 0) {\n                        setImmediate(() => {\n                            this.runSync();\n                        });\n                    }\n                    // Resolve\n                    resolve();\n                });\n            } catch (e) {\n                console.error(e);\n                this.syncIsRunning = false;\n                resolve();\n            }\n        });\n    }\n}\n\nconst main = async function (argv: string[]) {\n    const cli = new AccordCLI(argv);\n    return cli.run();\n};\n\nmain(process.argv);\n"]}